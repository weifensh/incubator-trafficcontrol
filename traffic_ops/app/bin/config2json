#!/usr/bin/perl
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
use strict;
use JSON;
use Test::TrafficServerConfig;

my $json = JSON->new;

foreach my $a (@ARGV) {
 	my $cfg = Test::TrafficServerConfig::loadConfigFile($a);
	print $json->pretty->encode($cfg);
}

=pod

my @config;

while (<>) {
	s{\s*#.*}{};
	next unless /\S/;

	# split on unescaped quotes -- avoids need for quote-pairing
	my @b = split /(?<!\\)"/;
	my @joined;
	my $cur = '';

	# create hash to represent this one line and populate
	my %h;
	while (scalar @b > 0) {
	  $cur .= shift @b;
	  while ($cur =~ /^\s*(\w+)=(.*)/) {
		my ($k, $next) = ($1, $2);
		if (length $next == 0) {
		  # incomplete -- add quote and go to next chunk
		  last;
		}
		if ($next =~ /^"([^"]*)"(.*)/ or $next =~ /(\S+)(.*)/) {
		  $h{$k} = $1;
		  $cur = $2;
		}
		else {
		  die "Malformed? $k=$next";
		}
	  }
	}
	if (length $cur != 0) {
	  die "$cur left over.  Malformed?";
	}

	push @config, \%h;
}

print $json->pretty->encode(\@config);
